{"version":3,"sources":["components/navbar.tsx","components/alertMessage.tsx","redux/actions/todos.ts","redux/actions/actionTypes.ts","components/input.tsx","components/todoItem.tsx","components/loader.tsx","components/modal.tsx","components/todoList.tsx","App.tsx","redux/reducers/todo.ts","redux/reducers/requests/todoRequests.ts","redux/index.ts","redux/actions/api.ts","redux/sagas/todos/fetchTodo.ts","redux/sagas/todos/addTodo.ts","redux/sagas/todos/deleteTodo.ts","redux/sagas/todos/checkTodo.ts","redux/sagas/index.ts","index.tsx"],"names":["Navbar","className","href","Alert","message","color","role","addFetchedTodos","todos","type","payload","todoFetchingError","addNewTodo","todo","Input","dispatch","useDispatch","useSelector","state","todoRequestState","useState","value","setValue","inputError","setInputError","id","placeholder","onChange","event","todoMessage","target","trim","length","onKeyPress","key","content","finished","disabled","error","status","loaded","onClick","TodoItem","onDelete","onCheck","classes","push","checked","join","Loader","Modal","onClose","aria-live","aria-atomic","style","opacity","data-dismiss","aria-label","aria-hidden","TodoList","setTodos","request","setRequest","useEffect","todoList","todoState","requestTodo","onDeleteHandler","setModal","show","setTimeout","onCheckHandler","checkTodo","modal","map","loading","App","action","initialState","todoRequests","combineReducers","fetchTodos","a","fetch","then","response","json","postTodos","method","headers","body","JSON","stringify","deleteTodos","updateTodos","delay","ms","Promise","res","watchFetchTodo","workerFetchTodo","takeEvery","put","call","data","reverse","watchAddTodo","workerAddTodo","watchDeleteTodo","workerDeleteTodo","watchCheckTodo","workerCheckTodo","rootSaga","all","sagaMiddleware","createSagaMiddleware","store","createStore","rootReducer","applyMiddleware","logger","run","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24680b3d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar: React.FC = () => {\n    return (\n        <div className=\"container\">\n            <nav className=\"navbar navbar-dark bg-primary\">\n                <a className=\"navbar-brand\" href=\"/\">Todo</a>\n            </nav>\n        </div>\n    )\n}\n\nexport default Navbar;\n","import React from \"react\";\n\ntype AlertType = {\n    message?: string\n    color?: \"alert alert-primary\" | \"alert alert-success\" | \"alert alert-danger\"\n}\n\nconst Alert: React.FC<AlertType> = ({message = \"Ooops something went wrong...\",\n                                        color = \"alert alert-primary\"}) =>\n    <div\n    className={color} role=\"alert\">\n    {message}\n    </div>\n\nexport default Alert","import {\n    ADD_FETCHED_TODO,\n    ADD_NEW_TODO,\n    DELETE_TODO,\n    FETCH_TODO,\n    CHECK_TODO,\n    TODO_FETCHING,\n    TODO_FETCHING_SUCCEED, TODO_FETCHING_ERROR, CLEAR_TODO\n} from \"./actionTypes\";\nimport {ITodo} from \"../../interfaces/interfaces\";\n\n\n//Fetching & adding todos to store\nexport const fetchTodos = ()=> ({\n    type:FETCH_TODO\n})\nexport const addFetchedTodos = (todos:ITodo[]) => ({\n    type: ADD_FETCHED_TODO,\n    payload: todos\n})\nexport const todoFetching = () => ({\n    type: TODO_FETCHING\n})\n\nexport const todoFetchingSucceed = () => ({\n    type: TODO_FETCHING_SUCCEED\n})\n\nexport const todoFetchingError = (message:string) => ({\n    type: TODO_FETCHING_ERROR,\n    payload: message\n})\n// Clear store\nexport const clearStore = () =>({\n    type:CLEAR_TODO\n})\n\n// Adding new todo\nexport const addNewTodo = (todo: ITodo) => ({\n    type: ADD_NEW_TODO,\n    payload: todo\n})\n\n//Delete todo\nexport const deleteTodo = (id:number) => ({\n    type: DELETE_TODO,\n    payload: id\n})\n\n// Check todo\nexport const checkTodo = (todo: ITodo) => ({\n    type: CHECK_TODO,\n    payload: todo\n})\n\n\n","// CRUD todos\nexport const ADD_FETCHED_TODO = \"ADD_FETCHED_TODO\"\nexport const FETCH_TODO = \"FETCH_TODO\"\nexport const ADD_NEW_TODO = \"ADD_NEW_TODO\"\nexport const DELETE_TODO = \"DELETE_TODO\"\nexport const CHECK_TODO = \"CHECK_TODO\"\nexport const CLEAR_TODO = \"CLEAR_TODO\"\n// Todos Requests\nexport const TODO_FETCHING = \"TODO_FETCHING\"\nexport const TODO_FETCHING_SUCCEED = \"TODO_FETCHING_SUCCEED\"\nexport const TODO_FETCHING_ERROR = \"TODO_FETCHING_ERROR\"","import React, {useState} from \"react\";\nimport Alert from \"./alertMessage\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {addNewTodo} from \"../redux/actions/todos\";\nimport {IAppState, ITodo} from \"../interfaces/interfaces\";\n\nconst Input: React.FC = () => {\n    const dispatch = useDispatch()\n    const {todos} = useSelector((state: IAppState) => state.todoRequestState);\n\n    // Input state & handlers\n    const [value, setValue] = useState<string>(\"\")\n    const [inputError, setInputError] = useState<boolean>(false)\n    function onChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\n        setInputError(false)\n        const todoMessage = event.target.value\n        if (todoMessage.trim().length === 0) {\n            setValue(\"\")\n            return\n        }\n        setValue(todoMessage)\n    }\n\n    // Keyboard && Mouse events\n    function onAddMouseHandler(event: React.MouseEvent) {\n        if (value.length === 0) {\n            setInputError(true)\n            return\n        }\n        const newTodo: ITodo = {\n            content: value,\n            finished: false\n        }\n        dispatch(addNewTodo(newTodo))\n        setValue(\"\")\n    }\n    function onAddBtnHandler(event: React.KeyboardEvent) {\n        if (event.key === \"Enter\") {\n            if (value.length === 0) {\n                setInputError(true)\n                return\n            }\n            const newTodo: ITodo = {\n                content: value,\n                finished: false\n            }\n            dispatch(addNewTodo(newTodo))\n            setValue(\"\")\n        }\n    }\n\n\n    return (\n        <div className=\"input-group pt-3 pb-3 m-auto d-flex flex-column\">\n            {\n                inputError && <Alert message={\"Typed data is empty or invalid\"} color={\"alert alert-danger\"}/>\n            }\n\n            <div className=\"input-group mb-3\">\n                <input\n                    type=\"text\"\n                    className=\"form-control\"\n                    id=\"form\"\n                    placeholder=\"Type your todo\"\n                    value={value}\n                    onChange={onChangeHandler}\n                    onKeyPress={onAddBtnHandler}\n                    disabled={todos.error.status || !todos.loaded}\n                />\n                <div className=\"input-group-append\">\n                    <button className=\"input-group-text\"\n                            onClick={onAddMouseHandler}\n                            disabled={todos.error.status || !todos.loaded} >\n                        Add\n                    </button>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default Input","import React from 'react';\nimport {ITodo} from \"../interfaces/interfaces\";\n\ntype TodoItem = {\n    todo: ITodo;\n    onDelete(todo: ITodo): void;\n    onCheck(todo: ITodo): void\n}\n\n\nconst TodoItem: React.FC<TodoItem> = ({todo, onDelete, onCheck}) => {\n    const classes:string[] = [\"p-0 m-0 pl-3\"]\n    if (todo.finished) {\n        classes.push(\"line-through\")\n    }\n    return (\n        <li className=\"list-group-item d-flex justify-content-between align-items-center pr-2\">\n            <div className=\"d-flex align-items-center\">\n                <input className=\"form-check-input mt-0 position-relative ml-2\"\n                       type=\"checkbox\"\n                       checked={todo.finished}\n                       onChange={() => onCheck(todo)}/>\n                <p className={classes.join(\" \")}>{todo.content} </p>\n            </div>\n            <button className=\"btn btn-danger\" onClick={() => onDelete(todo)}> Delete</button>\n        </li>\n    )\n}\n\nexport default TodoItem;\n","import React from \"react\";\n\nconst Loader: React.FC = () => {\n    return (\n        <div className=\"d-flex justify-content-center mb-2\">\n                <div className=\"spinner-grow text-primary\" role=\"status\"/>\n        </div>\n    )\n}\n\n\n\nexport default Loader","import React from \"react\";\n\ntype ModalType = {\n    message: string,\n    onClose():void\n}\nconst Modal: React.FC<ModalType> = ({message, onClose}) => {\n    return (\n        <div className=\"d-flex justify-content-center mb-3\" >\n            <div className=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\" style={{opacity:1}}>\n                <div className=\"toast-header\">\n                    <strong className=\"mr-auto\">Notification</strong>\n                    <button type=\"button\" onClick={()=> onClose()} className=\"ml-2 mb-1 close\" data-dismiss=\"toast\" aria-label=\"Close\">\n                        <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                </div>\n                <div className=\"toast-body\">\n                    {message}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Modal","import React, {useEffect, useState} from 'react';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {IAppState, IRequest, ITodo} from \"../interfaces/interfaces\";\nimport TodoItem from \"./todoItem\";\nimport {deleteTodo, fetchTodos, checkTodo} from \"../redux/actions/todos\";\nimport Loader from \"./loader\";\nimport Alert from \"./alertMessage\";\nimport Modal from \"./modal\";\n\ntype ModalMessageType = {\n    show: boolean,\n    message: string\n}\n\n\nconst TodoList: React.FC = () => {\n    const dispatch = useDispatch()\n\n    //Todos fetching, todos state\n    const [todos, setTodos] = useState<ITodo[]>([])\n    const [request, setRequest] = useState<IRequest>({})\n\n    useEffect(() => {\n        dispatch(fetchTodos())\n        // eslint-disable-next-line\n    }, [])\n    const todoList = useSelector((state: IAppState) => state.todoState);\n    const requestTodo = useSelector((state: IAppState) => state.todoRequestState);\n    useEffect(() => {\n        setTodos([...todoList])\n    }, [todoList])\n    useEffect(() => {\n        setRequest({...requestTodo})\n    }, [requestTodo])\n\n    // Todos handlers (delete & check toggle)\n    function onDeleteHandler(todo: ITodo) {\n        dispatch(deleteTodo(todo.id!))\n        modalMessage(` Todo with: content : ${todo.content};id:${todo.id};deleted successfully.`)\n    }\n\n    function onCheckHandler(todo: ITodo) {\n        todo.finished = !todo.finished\n        dispatch(checkTodo(todo))\n    }\n\n\n    // Modal information window\n    const [modal, setModal] = useState<ModalMessageType>({show: false, message: \"\"})\n\n    function modalMessage(message: string): void {\n        setModal({show: true, message})\n        setTimeout(() => {\n            setModal({show: false, message: \"\"})\n        }, 5000)\n    }\n\n    function modalMessageClose() {\n        setModal({show: false, message: \"\"})\n    }\n\n    return (\n        <>\n            {\n                request.todos?.error.status === true &&\n                <Alert message=\"Server is not available at the moment, try again later!\"\n                       color=\"alert alert-danger\"/>\n            }\n            {\n                modal.show && <Modal message={modal.message} onClose={modalMessageClose}/>\n            }\n            <ul className=\"list-group\">\n                {\n                    todos.map(todo => {\n                        return <TodoItem key={todo.id}\n                                         todo={todo}\n                                         onDelete={onDeleteHandler}\n                                         onCheck={onCheckHandler}/>\n                    })\n                }\n            </ul>\n            {\n                request.todos?.loading && <Loader/>\n            }\n            {\n                !requestTodo.todos.loading && todoList.length === 0 && !requestTodo.todos.error.status ?\n                    <Alert color=\"alert alert-primary\"\n                           message=\"There are no todos in a list. Just add some new in input below.\"/> : null\n            }\n        </>\n    )\n}\n\nexport default TodoList;\n","import React from 'react';\nimport Navbar from \"./components/navbar\";\nimport Input from \"./components/input\";\nimport TodoList from \"./components/todoList\";\nimport \"./App.css\"\n\nconst App: React.FC = () => {\n    return (\n        <>\n            <Navbar/>\n            <div className=\"container\">\n                <Input/>\n                <TodoList/>\n            </div>\n        </>\n    )\n}\n\nexport default App;\n","import {IActionTodo, ITodo} from \"../../interfaces/interfaces\";\nimport {ADD_FETCHED_TODO, CLEAR_TODO} from \"../actions/actionTypes\";\n\nconst todo = (state:ITodo[] = [],  action: IActionTodo) => {\n    switch (action.type) {\n        case ADD_FETCHED_TODO:\n            return [\n                ...action.payload\n            ]\n        case CLEAR_TODO :\n            return  []\n        default:\n            return state\n    }\n}\n\nexport default todo","import {IActionRequest, IRequest} from \"../../../interfaces/interfaces\";\nimport {TODO_FETCHING, TODO_FETCHING_ERROR, TODO_FETCHING_SUCCEED} from \"../../actions/actionTypes\";\n\nexport const initialState: IRequest = {\n    todos: {\n        loading: false,\n        loaded: false,\n        error: {\n            status: false,\n            message: \"\"\n        }\n    }\n}\n\nconst todoRequests = (state = initialState, action: IActionRequest) => {\n    switch (action.type) {\n        case TODO_FETCHING :\n            return {\n                ...state, todos: {\n                    ...state.todos,\n                    loading: true,\n                    loaded: false,\n                    error: {\n                        status: false,\n                        message: \"\"\n                    }\n                }\n            }\n        case TODO_FETCHING_SUCCEED :\n            return {\n                ...state, todos: {\n                    ...state.todos,\n                    loading: false,\n                    loaded: true,\n                    error: {\n                        status: false,\n                        message: \"\"\n                    }\n                }\n            }\n        case TODO_FETCHING_ERROR :\n            return {\n                ...state, todos: {\n                    ...state.todos,\n                    loading: false,\n                    loaded: false,\n                    error: {\n                        status: true,\n                        message: action.payload\n                    }\n                }\n            }\n        default:\n            return state\n    }\n}\n\nexport default todoRequests","import {combineReducers} from \"redux\";\nimport todo from \"./reducers/todo\";\nimport todoRequests from \"./reducers/requests/todoRequests\";\n\n\nexport default combineReducers({\n    todoState: todo,\n    todoRequestState: todoRequests,\n})\n\n","import {ITodo} from \"../../interfaces/interfaces\";\n\nexport const fetchTodos = async () => {\n    return await fetch(\"http://localhost:5000/todo\").then(response => response.json())\n}\n\n\nexport const postTodos = async (todo: ITodo) => {\n    return await fetch(\"http://localhost:5000/todo\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(todo)\n    }).then(response => response.json())\n\n}\n\nexport const deleteTodos = async (id: number) => {\n    return await fetch(`http://localhost:5000/todo/${id}`, {\n        method: \"DELETE\",\n    }).then(response => response.json())\n}\n\nexport const updateTodos = async (todo:ITodo) => {\n    return await fetch(`http://localhost:5000/todo/${todo.id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(todo)\n    }).then(response => response.json())\n}\n\nexport const delay = (ms:any) => new Promise(res => setTimeout(res, ms))","import {takeEvery, call, put} from \"redux-saga/effects\"\nimport { FETCH_TODO} from \"../../actions/actionTypes\";\nimport {delay, fetchTodos} from \"../../actions/api\";\nimport {addFetchedTodos, clearStore, todoFetching, todoFetchingError, todoFetchingSucceed} from \"../../actions/todos\";\nimport {ITodo} from \"../../../interfaces/interfaces\";\n\n\n\nexport function* watchFetchTodo() {\n    yield takeEvery(FETCH_TODO, workerFetchTodo)\n    yield put(todoFetching())\n}\n\nfunction* workerFetchTodo() {\n    try {\n        yield delay(3000)\n        const data:ITodo[] = yield call(fetchTodos)\n        yield put(addFetchedTodos(data.reverse()))\n        yield put(todoFetchingSucceed())\n    } catch (e) {\n        yield put(todoFetchingError(e))\n        yield put(clearStore())\n    }\n}","import {takeEvery, call, put} from \"redux-saga/effects\"\nimport { ADD_NEW_TODO} from \"../../actions/actionTypes\";\nimport { fetchTodos, postTodos} from \"../../actions/api\";\nimport {addFetchedTodos, clearStore, todoFetching, todoFetchingError, todoFetchingSucceed} from \"../../actions/todos\";\nimport {IActionTodo, ITodo} from \"../../../interfaces/interfaces\";\n\n\nexport function* watchAddTodo() {\n    yield takeEvery(ADD_NEW_TODO, workerAddTodo)\n    yield put(todoFetching())\n}\n\nfunction* workerAddTodo(action: IActionTodo) {\n    try {\n        yield call(postTodos, action.payload)\n        const data:ITodo[] = yield call(fetchTodos)\n\n        yield put(addFetchedTodos(data.reverse()))\n        yield put(todoFetchingSucceed())\n    } catch (e) {\n        yield put(todoFetchingError(e.message))\n        yield put(clearStore())\n    }\n}","import {takeEvery, call, put} from \"redux-saga/effects\"\nimport {DELETE_TODO} from \"../../actions/actionTypes\";\nimport {deleteTodos, fetchTodos} from \"../../actions/api\";\nimport {addFetchedTodos, clearStore, todoFetching, todoFetchingError, todoFetchingSucceed} from \"../../actions/todos\";\nimport {ITodo} from \"../../../interfaces/interfaces\";\n\n\nexport function* watchDeleteTodo() {\n    yield takeEvery(DELETE_TODO, workerDeleteTodo)\n    yield put(todoFetching())\n}\n\nfunction* workerDeleteTodo(action: any) {\n    try {\n        yield call(deleteTodos, action.payload)\n        const data:ITodo[] = yield call(fetchTodos)\n        yield put(addFetchedTodos(data.reverse()))\n        yield put(todoFetchingSucceed())\n\n    } catch (e) {\n        yield put(todoFetchingError(e.message))\n        yield put(clearStore())\n    }\n}","import {takeEvery, call, put} from \"redux-saga/effects\"\nimport {CHECK_TODO} from \"../../actions/actionTypes\";\nimport {fetchTodos, updateTodos} from \"../../actions/api\";\nimport {addFetchedTodos, clearStore, todoFetching, todoFetchingError, todoFetchingSucceed} from \"../../actions/todos\";\nimport {ITodo} from \"../../../interfaces/interfaces\";\n\n\nexport function* watchCheckTodo() {\n    yield takeEvery(CHECK_TODO, workerCheckTodo)\n    yield put(todoFetching())\n}\n\nfunction* workerCheckTodo(action: any) {\n    try {\n        yield call(updateTodos, action.payload)\n        const data: ITodo[] = yield call(fetchTodos)\n        yield put(addFetchedTodos(data.reverse()))\n        yield put(todoFetchingSucceed())\n    } catch (e) {\n        yield put(todoFetchingError(e.message))\n        yield put(clearStore())\n    }\n}","import {all} from 'redux-saga/effects'\nimport {watchFetchTodo} from \"./todos/fetchTodo\";\nimport {watchAddTodo} from \"./todos/addTodo\";\nimport {watchDeleteTodo} from \"./todos/deleteTodo\";\nimport {watchCheckTodo} from \"./todos/checkTodo\";\n\nexport default function* rootSaga() {\n    yield all([\n        watchFetchTodo(),\n        watchAddTodo(),\n        watchDeleteTodo(),\n        watchCheckTodo()\n    ])\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {applyMiddleware, createStore} from \"redux\";\nimport rootReducer from \"./redux\"\nimport {Provider} from \"react-redux\";\nimport createSagaMiddleware from 'redux-saga'\nimport logger from \"redux-logger\"\nimport rootSaga from \"./redux/sagas\";\n\n\nconst sagaMiddleware = createSagaMiddleware()\nconst store = createStore(rootReducer, applyMiddleware(sagaMiddleware, logger))\nsagaMiddleware.run(rootSaga)\n\nReactDOM.render(\n  <Provider store ={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}